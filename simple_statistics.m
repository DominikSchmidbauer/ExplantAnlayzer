%% Simple Statistics

%   This script reads all .mat files within a folder, generated by the
%   ExplantAnalyzer function.
%   Several statistical values are calculated and stored in a
%   struct.

%   Dominik Schmidbauer, Medical University Innsbruck
%   dominik.schmidbauer@i-med.ac.at
%   Version 1.2

%%
clear all

% Pixel/voxelsize in µm.
voxel_size =        0.328;

% Distance between the Sholl rings in µm.
% If sholl_distance = 0 then no Sholl analysis will be performed.
% Time consuming step!
sholl_distance =    0          / voxel_size;

% Add current path.
addpath(pwd);

% Select folder containing the MAT files.
selpath = uigetdir;
cd(selpath)

% Find all MAT files.
listing = dir('**/*.mat');

%% Loop all MAT files
for i = 1:size(listing,1)
    
    % Start timer for one explant.
    tic
    
    % Get the name of current file.
    [~, name, ~] = fileparts(listing(i).name);
    
    % Go to subfolder
    cd(listing(i).folder);
    
    % Load .mat file.
    load(listing(i).name)
    
    % Calculate basic statistics of current sample.
    Samples(i).Name =                       name;
    Samples(i).Folder =                     listing(i).folder;
    Samples(i).Neurite_Lengths =            D;
    Samples(i).Number_of_Neurites  =        length(D);
    Samples(i).Mean_Length =                mean(D);
    Samples(i).Median_Length =              median(D);
    Samples(i).Max_Length =                 max(D);
    Samples(i).Number_of_Startpoints_G =    sum(G.Edges.Weight == 0);
    Samples(i).Number_of_Startpoints_TR =   sum(TR.Edges.Weight == 0);
    Samples(i).Number_of_Branchpoints_G =   sum(degree(G) > 2) - 1;
    Samples(i).Number_of_Branchpoints_TR =  sum(indegree(TR) > 1) - 1;
    Samples(i).Total_Length_G =             sum(G.Edges.Weight);
    Samples(i).Total_Length_TR =            sum(TR.Edges.Weight);
    Samples(i).Sum_Lengths_TR =             sum(D);
    Samples(i).Explant_Size =               explant_size;
    Samples(i).Hull_Area =                  hull_area;
    Samples(i).Neurites_Area =              neurites_area;
    Samples(i).Covered_Area =               covered_area;
    Samples(i).b3_dapi_multi_explant =      b3_dapi_multi_explant;
    Samples(i).b3_dapi_mean_explant =       b3_dapi_mean_explant;
    Samples(i).b3_sum_explant =             b3_sum_explant;
    
    % Find endpoints.
    idx_ep = find(TR.Nodes.ep == 1);
    
    for k = 1:length(idx_ep)
        
        % Extract end-point coordinates. X and Y are switched.
        ep_y =  TR.Nodes.comx(idx_ep(k));
        ep_x =  TR.Nodes.comy(idx_ep(k));
        
        % Find start-point for this end-point.
        D =     shortestpath(TR, idx_ep(k), length(TR.Nodes.idx));
        
        % Extract start-point coordinates. X and Y are switched.
        sp_y =  TR.Nodes.comx(D(length(D) - 1));
        sp_x =  TR.Nodes.comy(D(length(D) - 1));
        
        % Calculate clockwise angle between vector from start-point to
        % end-point and a vector facing North (here: negative y axis).
        Samples(i).Neurite_Angles(k,1) = wrapTo360(atan2d ((ep_x - sp_x), (sp_y - ep_y)));
        
    end
    
    %% Sholl analysis
    % Performe a simple Sholl analysis.
    if sholl_distance > 0
        
        % Start at the centroid of the explant.
        stats =     regionprops(explant,'Centroid');
        y =         stats.Centroid(1);
        x =         stats.Centroid(2);
        
        % Calculate the minimum and the maximum distance for the analysis.
        explant_boundary =  bwboundaries(explant,'noholes');
        explant_boundary =  explant_boundary{1};
        neurites_boundary = bwboundaries(neurites,'noholes');
        neurites_boundary = vertcat(neurites_boundary{:});
        min_radius =        max(sqrt((explant_boundary(:,1) - x).^2 + (explant_boundary(:,2) - y).^2));
        max_radius =        max(sqrt((neurites_boundary(:,1) - x).^2 + (neurites_boundary(:,2) - y).^2));
        
        % Setup.
        [size_y, size_x] =              size(explant);
        [columnsInImage, rowsInImage] = meshgrid(1:size_x, 1:size_y);
        all_circles =                   logical(zeros(size(explant)));
        k = 1;
        
        % Step from min to max radius.
        for d = min_radius : sholl_distance : max_radius
            
            % Generate a disk with current size.
            disk_pixels = (rowsInImage - x).^2 + (columnsInImage - y).^2 <= d.^2;
            
            % Extract boundary, remove indices ouside the image and
            % generate a binary image of the circle.
            circle_pixels =             bwboundaries(disk_pixels, 4, 'noholes');
            circle_pixels =             circle_pixels{1};
            circle_pixels(circle_pixels(:,1) > size_y , :) = [];
            circle_pixels(circle_pixels(:,2) > size_x , :) = [];
            circle_pixels_idx =         sub2ind(size(explant), circle_pixels(:,1), circle_pixels(:,2));
            circle =                    logical(zeros(size(explant)));
            circle(circle_pixels_idx) = 1;
            
            % Generate image with all circles.
            all_circles(circle_pixels_idx) = 1;
            
            % Find intersections of circle and neurites.
            % Save intersection and total pixel counts.
            intersections =                             circle & neurites;
            Samples(i).Sholl_Distance(k,1) =            round((d - min_radius) * voxel_size);
            Samples(i).Sholl_Pixels(k,1)  =             sum(intersections,'all');
            [~, Samples(i).Sholl_Intersections(k,1)] =  bwlabel(intersections);
            
            k = k+1;
        end
        
        % % Graphical output of Sholl analysis.
        % figure
        % imshow(all_circles | neurites | explant)
        
    end
    
    %Print current explant number and time.
    fprintf(1, ['Finished explant ',num2str(i),' of ', num2str(size(listing,1)),' in ',num2str(toc),' s\n']);
    
end

%% Remove all explants with a total outgrowth less than 1 mm

idx = find(vertcat(Samples.Total_Length_G) < 1000);
Samples(idx) = [];

%% Excel Export

cd(selpath)
Samples_export = table({Samples.Name}.', {Samples.Folder}.', [Samples.Number_of_Neurites].', [Samples.Mean_Length].', [Samples.Median_Length].', [Samples.Max_Length].', [Samples.Number_of_Startpoints_G].', [Samples.Number_of_Startpoints_TR].', [Samples.Number_of_Branchpoints_G].', [Samples.Number_of_Branchpoints_TR].', [Samples.Total_Length_G].', [Samples.Total_Length_TR].', [Samples.Sum_Lengths_TR].', [Samples.Explant_Size].', [Samples.Hull_Area].', [Samples.Neurites_Area].', [Samples.Covered_Area].', [Samples.b3_dapi_multi_explant].', [Samples.b3_dapi_mean_explant].', [Samples.b3_sum_explant].', 'VariableNames', {'Name', 'Folder', 'Number_of_Neurites', 'Mean_Length', 'Median_Length', 'Max_Length', 'Number_of_Startpoints_G', 'Number_of_Startpoints_TR', 'Number_of_Branchpoints_G', 'Number_of_Branchpoints_TR', 'Total_Length_G', 'Total_Length_TR', 'Sum_Lengths_TR', 'Explant_Size', 'Hull_Area', 'Neurites_Area', 'Covered_Area', 'b3_dapi_multi_explant', 'b3_dapi_mean_explant', 'b3_sum_explant'});
writetable(Samples_export,'Samples.xlsx')

%%
clearvars -except Samples