%% Simple Statistics

%   This script uses all .mat files in a folder, generated by the
%   explantanalysis function. 
%   Several statistical values are calculated and stored in
%   structs.

%   Dominik Schmidbauer, Medical University Innsbruck
%   dominik.schmidbauer@i-med.ac.at
%   Version 1.0

%%
clear all

% Add current path
addpath(pwd);

% Select folder containg the MAT files
selpath = uigetdir;
cd(selpath)

% Find all MAT files
listing = dir('*.mat');

%% Loop all MAT files
for i = 1:size(listing,1)
    
    % Get the name of current file
    [~, name, ~] = fileparts(listing(i).name);
    
    % Write basic information about the current sample
    Samples(i).ID =         i;
    Samples(i).Name =       name;
 
    % Load MAT file
    load(listing(i).name)
        
    % Read explant size
    Samples(i).Explant_Size = explant_size;
    
    % Calculate distances from every node to center
    nb_center_node = length(TR.Nodes.idx);
    [~,D] = shortestpathtree(TR, nb_center_node);
    Samples(i).All_Distances = D.';
    
    % Find endpoints
    idx_ep = find(TR.Nodes.ep == 1);
    
    % Calculate basic statistics of current sample
    Samples(i).Neurite_Lengths          = D(idx_ep).';
    Samples(i).Mean_Length              = mean(Samples(i).Neurite_Lengths);
    Samples(i).Median_Length            = median(Samples(i).Neurite_Lengths);
    Samples(i).Max_Length               = max(Samples(i).Neurite_Lengths);
    Samples(i).Number_of_Neurites       = length(Samples(i).Neurite_Lengths);
    Samples(i).Starting_Points          = sum(G.Edges.Weight == 0);
    Samples(i).Number_of_Branchpoints   = length(Samples(i).All_Distances) - Samples(i).Number_of_Neurites;
    Samples(i).Sum_Neurite_Lengths      = sum(Samples(i).Neurite_Lengths);
    Samples(i).Total_Length             = sum(G.Edges.Weight);
    Samples(i).Total_Tree_Length        = sum(TR.Edges.Weight);
    
    % Extract endpoint coordinates. X and Y are switched.
    ep_y = TR.Nodes.comx(idx_ep);
    ep_x = TR.Nodes.comy(idx_ep);
    
    % Find centroid of explant
    C = regionprops(explant,'Centroid');
    Cx = C.Centroid(1);
    Cy = C.Centroid(2);
    
    % Calculate angles between vectors from centroid to endpoints and a
    % vector facing up (negative y axis)
    Samples(i).Neurite_Angles = atan2 ((ep_x - Cx),(Cy - ep_y));
    
end

%% Remove all explants with a total outgrowth less than 1 mm

idx = find(vertcat(Samples.Total_Tree_Length) < 1000);
Samples(idx) = [];

%%
clear i explant neurites skel G TR explant_size C Cx Cy D idx nb_center_node ...
    idx_ep ep_y ep_x name selpath listing ...
    b3_dapi_mean_explant b3_dapi_multi_explant b3_sum_explant