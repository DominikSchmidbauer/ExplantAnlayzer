%% Simple Statistics

%   This script reads all .mat files within a folder, generated by the
%   ExplantAnalyzer function.
%   Several statistical values are calculated and stored in a
%   struct.

%   Dominik Schmidbauer, Medical University Innsbruck
%   dominik.schmidbauer@i-med.ac.at
%   Version 1.0

%%
clear all

% Add current path.
addpath(pwd);

% Select folder containing the MAT files.
selpath = uigetdir;
cd(selpath)

% Find all MAT files.
listing = dir('*.mat');

%% Loop all MAT files
for i = 1:size(listing,1)
    
    % Get the name of current file.
    [~, name, ~] = fileparts(listing(i).name);
    
    % Load .mat file.
    load(listing(i).name)
    
    % Calculate basic statistics of current sample.
    Samples(i).Name =                       name;
    Samples(i).Neurite_Lengths =            D;
    Samples(i).Number_of_Neurites  =        length(D);
    Samples(i).Mean_Length =                mean(D);
    Samples(i).Median_Length =              median(D);
    Samples(i).Max_Length =                 max(D);
    Samples(i).Number_of_Startpoints_G =    sum(G.Edges.Weight == 0);
    Samples(i).Number_of_Startpoints_TR =   sum(TR.Edges.Weight == 0);
    Samples(i).Number_of_Branchpoints_G =   sum(degree(G) > 2) - 1;
    Samples(i).Number_of_Branchpoints_TR =  sum(indegree(TR) > 1) - 1;
    Samples(i).Total_Length_G =             sum(G.Edges.Weight);
    Samples(i).Total_Length_TR =            sum(TR.Edges.Weight);
    Samples(i).Sum_Lengths_TR =             sum(D);
    Samples(i).Explant_Size =               explant_size;
    Samples(i).Hull_Area =                  hull_area;    
    Samples(i).Neurites_Area =              neurites_area;
    Samples(i).Covered_Area =               covered_area;
    Samples(i).Sholl_Curve_X =              sort(D,'ascend');
    Samples(i).Sholl_Curve_Y =              (length(D):-1:1).';
    Samples(i).b3_dapi_multi_explant =      b3_dapi_multi_explant;
    Samples(i).b3_dapi_mean_explant =       b3_dapi_mean_explant;
    Samples(i).b3_sum_explant =             b3_sum_explant;
    
    % Find endpoints.
    idx_ep = find(TR.Nodes.ep == 1);
    
    for k = 1:length(idx_ep)
        
        % Extract end-point coordinates. X and Y are switched.
        ep_y =  TR.Nodes.comx(idx_ep(k));
        ep_x =  TR.Nodes.comy(idx_ep(k));
        
        % Find start-point for this end-point.
        D =     shortestpath(TR, idx_ep(k), length(TR.Nodes.idx));
        
        % Extract start-point coordinates. X and Y are switched.
        sp_y =  TR.Nodes.comx(D(length(D) - 1));
        sp_x =  TR.Nodes.comy(D(length(D) - 1));

        % Calculate clockwise angle between vector from start-point to 
        % end-point and a vector facing North (here: negative y axis).
        Samples(i).Neurite_Angles(k,1) = wrapTo360(atan2d ((ep_x - sp_x), (sp_y - ep_y)));
        
    end
    
end

%% Remove all explants with a total outgrowth less than 1 mm

idx = find(vertcat(Samples.Total_Length_G) < 1000);
Samples(idx) = [];

%%
clearvars -except Samples